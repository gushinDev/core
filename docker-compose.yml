version: "3.7"
x-app-args: &app-args
  - USER=${USER}
  - UID=${UID}

services:
  lms-nginx:
    image: nginx:alpine
    container_name: lms-nginx
    restart: unless-stopped
    ports:
      - '80:80'
    volumes:
      - ${LOCAL_CODE_PATH_LMS}:/var/www
      - ./configs/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    environment:
      - NGINX_SERVICE_NAME=lms
    depends_on:
      - lms
      - mysql
    links:
      - lms
    networks:
      - app-network

  lms:
    build:
      context: ./images/php
      dockerfile: Dockerfile
    container_name: lms
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ${SSH_PATH}:/home/${USER}/.ssh:rw
      - ${LOCAL_CODE_PATH_LMS}:/var/www
    networks:
      - app-network
    depends_on:
      - mysql
      - redis
    links:
      - mysql
      - redis
    environment:
      XDEBUG_MODE: ${XDEBUG_MODE_LMS:-off}
      XDEBUG_CONFIG: client_host=${XDEBUG_REMOTE_HOST:-172.17.0.1} client_port=${XDEBUG_STORM_PORT_LMS:-9010} idekey=${XDEBUG_IDEKEY:-PHPSTORM}
      PHP_IDE_CONFIG: serverName=${LOCAL_HOSTNAME_LMS}

  notifications-nginx:
    image: nginx:alpine
    container_name: notifications-nginx
    restart: unless-stopped
    volumes:
      - ${LOCAL_CODE_PATH_LMS}:/var/www
      - ./configs/nginx/nginx_notify.conf:/etc/nginx/conf.d/default.conf
    environment:
      - NGINX_SERVICE_NAME=notification
    depends_on:
      - notifications
      - mysql
    links:
      - notifications
    networks:
      - app-network

  notifications:
    build:
      context: ./images/php
      dockerfile: Dockerfile
    container_name: notifications
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ${SSH_PATH}:/home/${USER}/.ssh:rw
      - ${LOCAL_CODE_PATH_LMS}:/var/www
      - ./configs/xdebug/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    networks:
      - app-network
    depends_on:
      - mysql
      - redis
    links:
      - mysql
      - redis

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: unless-stopped
    ports:
      - ${LOCAL_FORWARD_DB_PORT}:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${LOCAL_MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./configs/mysql-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    logging:
      driver: 'none'
    ports:
      - '1025:1025'
      - '8025:8025'
    networks:
      - app-network
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - app-network
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: always
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - app-network
  rabbitmq:
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      - TZ=Europe/Moscow
      - RABBITMQ_DEFAULT_USER=local
      - RABBITMQ_DEFAULT_PASS=local
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - app-network

  workers:
    build:
      context: "."
      dockerfile: ./images/php/Dockerfile
      args: *app-args
    command: [ "php", "artisan", "queue:work" ]
    container_name: "workers"
    volumes:
      - ${SSH_PATH}:/home/${USER}/.ssh:rw
      - ${LOCAL_CODE_PATH_LMS}:/var/www
      - ./configs/nginx/:/etc/nginx/conf.d/:ro
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
  rabbitmq-data:
  redis-data: